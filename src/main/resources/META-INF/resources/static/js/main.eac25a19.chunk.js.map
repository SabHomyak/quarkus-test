{"version":3,"sources":["components/TodoList/index.jsx","App.js","index.js"],"names":["columns","title","dataIndex","render","text","path","getDate","a","axios","get","headers","Authorization","res","data","map","isDone","toString","setDone","selectedRows","setData","done","newData","concat","forEach","id","todo","newTodo","find","todoFind","put","JSON","stringify","addTodo","post","TodoList","useState","setSelectedRows","setText","useEffect","className","value","placeholder","onChange","e","target","onClick","name","date","Date","toISOString","rowKey","rowSelection","selectedRowKeys","dataSource","pagination","position","defaultPageSize","type","ids","delete","danger","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"qQAKMA,EAAU,CACd,CACEC,MAAO,OACPC,UAAW,OACXC,OAAQ,SAACC,GAAD,OAAU,4BAAIA,MAExB,CACEH,MAAO,OACPC,UAAW,QAEb,CACED,MAAO,SACPC,UAAW,WAKTG,EAAO,cAEPC,EAAO,uCAAG,4BAAAC,EAAA,sEACIC,IAAMC,IAAIJ,EAAM,CAChCK,QAAS,CACPC,cAAe,4BAHL,cACRC,EADQ,gBAMDA,EAAIC,KAAKC,KAAI,SAACD,GACzB,OAAO,2BAAKA,GAAZ,IAAkBE,OAAQF,EAAKE,OAAOC,gBAP1B,mFAAH,qDA6BPC,EAAU,SAACJ,EAAMK,EAAcC,EAASC,GAC5C,IAAMC,EAAUR,EAAKS,SACrBJ,EAAaK,SAAQ,SAACC,GACpB,IAZgBC,EAYVC,EAAUL,EAAQM,MAAK,SAACC,GAC5B,OAAOA,EAASJ,KAAOA,KAEzBE,EAAQX,OAASK,EAAKJ,WAfNS,EAgBLC,EAfblB,IAAMqB,IAAN,UAAaxB,EAAb,YAAqBoB,EAAKD,IAAMM,KAAKC,UAAUN,GAAO,CACpDf,QAAS,CACPC,cAAe,yBACf,eAAgB,yBAcpBQ,EAAQE,IAGJW,EAAO,uCAAG,WAAOP,GAAP,SAAAlB,EAAA,sEACEC,IAAMyB,KAAK5B,EAAMyB,KAAKC,UAAUN,GAAO,CACrDf,QAAS,CACPC,cAAe,yBACf,eAAgB,sBAJN,yDAAH,sDASPuB,EAAW,WACf,MAAwBC,mBAAS,IAAjC,mBAAOtB,EAAP,KAAaM,EAAb,KACA,EAAwCgB,mBAAS,IAAjD,mBAAOjB,EAAP,KAAqBkB,EAArB,KACA,EAAwBD,mBAAS,IAAjC,mBAAO/B,EAAP,KAAaiC,EAAb,KAOA,OALAC,oBAAS,sBAAC,4BAAA/B,EAAA,sEACSD,IADT,OACJO,EADI,OAERM,EAAQN,GAFA,2CAGP,IAGD,mCACE,sBAAK0B,UAAU,QAAf,UACE,uBAAMA,UAAU,UAAhB,UACE,cAAC,IAAD,CACEC,MAAOpC,EACPqC,YAAY,eACZC,SAAU,SAACC,GACTN,EAAQM,EAAEC,OAAOJ,UAGrB,cAAC,IAAD,CACEK,QAAO,sBAAE,4BAAAtC,EAAA,yDACM,KAATH,EADG,gCAEW4B,EAAQ,CACtBc,KAAM1C,EACN2C,MAAM,IAAIC,MAAOC,cACjBlC,OAAQ,UALL,8BAOYT,IAPZ,OAODO,EAPC,OAQLM,EAAQN,GACRwB,EAAQ,IATH,2CADX,oBAiBF,cAAC,IAAD,CACEa,OAAO,KACPC,aAAc,CACZT,SAAU,SAACU,GACThB,EAAgBgB,KAGpBpD,QAASA,EACTqD,WAAYxC,EACZyC,WAAY,CACVC,SAAU,CAAC,gBACXC,gBAAiB,KAGrB,sBAAKjB,UAAU,UAAf,UACE,cAAC,IAAD,CACEkB,KAAK,UACLZ,QAAO,sBAAE,4BAAAtC,EAAA,sEA9FAmD,EA+FWxC,EA9FvBV,IAAMmD,OAAOtD,EAAM,CACxBK,QAAS,CACPC,cAAe,0BAEjBE,KAAM6C,IAyFW,uBAEUpD,IAFV,OAEHO,EAFG,OAGPM,EAAQN,GAHD,iCA9FD,IAAC6C,IA8FA,OAKTE,QAAM,EAPR,oBAWA,cAAC,IAAD,CACEf,QAAS,WACP5B,EAAQJ,EAAMK,EAAcC,GAAS,IAFzC,kBAOA,cAAC,IAAD,CACE0B,QAAS,WACP5B,EAAQJ,EAAMK,EAAcC,GAAS,IAFzC,6BC3IK0C,EAJH,WACV,OAAO,8BAAK,cAAC,EAAD,O,OCGdC,IAAS3D,OACP,cAAC,IAAM4D,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.eac25a19.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport axios from \"axios\";\r\n\r\nimport { Table, Button, Input } from \"antd\";\r\nconst columns = [\r\n  {\r\n    title: \"Todo\",\r\n    dataIndex: \"name\",\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: \"Date\",\r\n    dataIndex: \"date\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: \"isDone\",\r\n  },\r\n];\r\n\r\n// const path = \"http://localhost:8080/api/todos\";\r\nconst path = \"./api/todos\";\r\n\r\nconst getDate = async () => {\r\n  const res = await axios.get(path, {\r\n    headers: {\r\n      Authorization: \"Basic YWRtaW46YWRtaW4=\",\r\n    },\r\n  });\r\n  return await res.data.map((data) => {\r\n    return { ...data, isDone: data.isDone.toString() };\r\n  });\r\n};\r\n\r\nconst deleteTodos = (ids) => {\r\n  return axios.delete(path, {\r\n    headers: {\r\n      Authorization: \"Basic YWRtaW46YWRtaW4=\",\r\n    },\r\n    data: ids,\r\n  });\r\n};\r\n\r\nconst updateTodo = (todo) => {\r\n  axios.put(`${path}/${todo.id}`, JSON.stringify(todo), {\r\n    headers: {\r\n      Authorization: \"Basic YWRtaW46YWRtaW4=\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\n\r\nconst setDone = (data, selectedRows, setData, done) => {\r\n  const newData = data.concat();\r\n  selectedRows.forEach((id) => {\r\n    const newTodo = newData.find((todoFind) => {\r\n      return todoFind.id === id;\r\n    });\r\n    newTodo.isDone = done.toString();\r\n    updateTodo(newTodo);\r\n  });\r\n  setData(newData);\r\n};\r\n\r\nconst addTodo = async (todo) => {\r\n  let res = await axios.post(path, JSON.stringify(todo), {\r\n    headers: {\r\n      Authorization: \"Basic YWRtaW46YWRtaW4=\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\n\r\nconst TodoList = () => {\r\n  const [data, setData] = useState([]);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  useEffect(async () => {\r\n    let data = await getDate();\r\n    setData(data);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"table\">\r\n        <form className=\"addTodo\">\r\n          <Input\r\n            value={text}\r\n            placeholder=\"Your todo...\"\r\n            onChange={(e) => {\r\n              setText(e.target.value);\r\n            }}\r\n          />\r\n          <Button\r\n            onClick={async () => {\r\n              if (text !== \"\") {\r\n                let res = await addTodo({\r\n                  name: text,\r\n                  date: new Date().toISOString(),\r\n                  isDone: \"false\",\r\n                });\r\n                let data = await getDate();\r\n                setData(data);\r\n                setText(\"\");\r\n              }\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n        </form>\r\n        <Table\r\n          rowKey=\"id\"\r\n          rowSelection={{\r\n            onChange: (selectedRowKeys) => {\r\n              setSelectedRows(selectedRowKeys);\r\n            },\r\n          }}\r\n          columns={columns}\r\n          dataSource={data}\r\n          pagination={{\r\n            position: [\"bottomCenter\"],\r\n            defaultPageSize: 5,\r\n          }}\r\n        />\r\n        <div className=\"buttons\">\r\n          <Button\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              await deleteTodos(selectedRows);\r\n              let data = await getDate();\r\n              setData(data);\r\n            }}\r\n            danger\r\n          >\r\n            Remove\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              setDone(data, selectedRows, setData, true);\r\n            }}\r\n          >\r\n            Done\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              setDone(data, selectedRows, setData, false);\r\n            }}\r\n          >\r\n            Undone\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport { TodoList };\r\n","import { TodoList } from \"./components/TodoList\";\n\nconst App = () => {\n  return <div><TodoList /></div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}